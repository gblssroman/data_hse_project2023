# –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å–æ streamlit
import streamlit as st
bot_url = "https://t.me/official_studobot"
ipynb_url = "https://github.com/rtccreator/data_hse_project2023/blob/main/main.ipynb"
st.title("–ò—Ç–æ–≥–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç / –ù–∞—É–∫–∞ –æ –¥–∞–Ω–Ω—ã—Ö / –í–æ–ª–æ–±—É–µ–≤ –í–ª–∞–¥–∏—Å–ª–∞–≤")
st.header("–í —á–µ–º –∑–∞–∫–ª—é—á–∞–µ—Ç—Å—è –≤–∫—Ä–∞—Ç—Ü–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–∞—è —Ä–∞–±–æ—Ç–∞?")
st.subheader("\n–ù–∞–ø–∏—Å–∞–Ω–Ω—ã–π –∫–æ–¥ –º–æ–∂–µ—Ç:\n\
1) –û—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –∑–∞–≤—Ç—Ä–∞ –∏ –¥–∞–≤–∞—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏,\n\
2) –£–∑–Ω–∞–≤–∞—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—ã–π –∫—É—Ä—Å —é–∞–Ω—è –∫ —Ä—É–±–ª—é, –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –≥—Ä–∞—Ñ–∏–∫ –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞—Ç—å, —á—Ç–æ –¥–µ–ª–∞—Ç—å –¥–ª—è –∑–∞—Ä–∞–±–æ—Ç–∫–∞,\n\
3) –ü—Ä–∏–Ω–∏–º–∞—Ç—å –±–æ–ª—å—à–∏–µ —Å–ø–∏—Å–∫–∏ —Å –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–ø–∏—Å–æ–∫ —é–∑–µ—Ä—É –æ–±—Ä–∞—Ç–Ω–æ —Ç–æ–ª—å–∫–æ —Å –≤–∞–ª–∏–¥–Ω—ã–º–∏ e-mail –∞–¥—Ä–µ—Å–∞–º–∏ –∏ —Ç–µ–ª–µ—Ñ–æ–Ω–∞–º–∏,\n\
4) –£–∑–Ω–∞–≤–∞—Ç—å —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É –Ω–∞ –∫–∞–∫—É—é-–ª–∏–±–æ –¥–∞—Ç—É –≤ 2022 –≥–æ–¥—É –≤ –≥–æ—Ä–æ–¥–µ –ë–∞–∑–µ–ª—å –æ—Å–Ω–æ–≤—ã–≤–∞—è—Å—å –Ω–∞ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è—Ö ML-–º–æ–¥–µ–ª–∏,\n\
5) –°–æ–∑–¥–∞–Ω —Ç–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π —Ä–µ—à–∞–µ—Ç –°–õ–ê–£ –º–µ—Ç–æ–¥–æ–º –ö—Ä–∞–º–µ—Ä–∞\n\n")

st.markdown(f'''<a href={bot_url}><button style="background-color:Red;color:White;border-radius:5px;padding:10px;margin:15px 0;border-color:Red;">–ü–µ—Ä–µ–π—Ç–∏ –≤ –±–æ—Ç–∞</button></a>''',
unsafe_allow_html=True)
st.header("\n\n–í–µ—Å—å –∫–æ–¥:\n")
st.markdown(f'''<a href={ipynb_url}><button style="background-color:Green;color:White;border-radius:5px;padding:10px;margin:15px 0;border-color:Green;">–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏—Å—Ö–æ–¥–Ω—ã–π –∫–æ–¥ –Ω–æ—É—Ç–±—É–∫–∞ (Github)</button></a>''',
unsafe_allow_html=True)
#–î–∞–ª–µ–µ –∫–æ–¥ –∏ –µ–≥–æ —Ä–∞–±–æ—Ç–∞
####################################
import numpy as np
import sympy as sp
from aiogram import Bot, Dispatcher, executor, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from PIL import Image
from io import BytesIO
import io
import requests
import asyncio

bot_inst = Bot(st.secrets.tg.TG_TOKEN)
dp_inst = Dispatcher(bot_inst)

@dp_inst.message_handler(commands=['start'])
async def init_command(message: types.Message):
    reply_kb = InlineKeyboardMarkup()
    reply_kb.add(InlineKeyboardButton("üßÆ –†–µ—à–∏—Ç—å –°–õ–ê–£ –ø–æ –ö—Ä–∞–º–µ—Ä—É", callback_data='solve'))
    await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –Ø —Ç–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç –ø—Ä–æ–µ–∫—Ç–∞ –í–ª–∞–¥–∞ –í–æ–ª–æ–±—É–µ–≤–∞, –∫–æ—Ç–æ—Ä—ã–π —É–º–µ–µ—Ç —Ä–µ—à–∞—Ç—å –°–õ–ê–£ –º–µ—Ç–æ–¥–æ–º –ö—Ä–∞–º–µ—Ä–∞. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=reply_kb)

@dp_inst.callback_query_handler(lambda query: True)
async def process_query(callback_query: types.CallbackQuery):
    callback_id = callback_query.from_user.id
    callback_data = callback_query.data
    error_txt = "–í–≤–æ–¥ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π!"

    if callback_data == 'solve':
        await bot_inst.send_message(callback_id, "–í–≤–µ–¥–∏—Ç–µ –°–õ–ê–£ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: [[2,5,-1,10], [1,-1,3,5], [3,2,4,4]]:")

@dp_inst.message_handler()
async def process_message(message: types.Message):
    message_text = message.text
    try:
        slau = eval(message_text)
        result = solve_cramer(slau)
        await message.answer(f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {result}")
    except Exception:
        await message.answer("–í–≤–æ–¥ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π!")

###—Ñ—É–Ω–∫—Ü–∏–∏

####–æ—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –±–æ—Ç–∞
async def main():
    st.title("–ë–æ—Ç, —Ä–µ—à–∞—é—â–∏–π –°–õ–ê–£ –º–µ—Ç–æ–¥–æ–º –ö—Ä–∞–º–µ—Ä–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!")
    st.write("–ü–æ –æ—Å—Ç–∞–ª—å–Ω—ã–º –ø—É–Ω–∫—Ç–∞–º - —Å–º. Jupyter Notebook (–∑–µ–ª–µ–Ω–∞—è –∫–Ω–æ–ø–∫–∞)! –¢–∞–º –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω –≤–µ—Å—å –∫–æ–¥.")

async def start_polling():
    await dp_inst.start_polling()
####–∫–æ–Ω–µ—Ü

def solve_cramer(slau):
    M = sp.Matrix(slau)
    M_coeff = M[:, :-1]
    M_const = M[:, -1]
    res = []
    
    if M_coeff.cols != M_coeff.rows:
        return '–ú–∞—Ç—Ä–∏—Ü–∞ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∫–≤–∞–¥—Ä–∞—Ç–Ω–æ–π, –ø–æ –ö—Ä–∞–º–µ—Ä—É –µ–µ –Ω–µ —Ä–µ—à–∏—Ç—å, \
–∏—Å–ø–æ–ª—å—É–π—Ç–µ, –Ω–∞–ø—Ä–∏–º–µ—Ä, –º–µ—Ç–æ–¥ –ì–∞—É—Å—Å–∞'
    elif M_coeff.det() == 0:
        return '–û–ø—Ä–µ–¥–µ–ª–∏—Ç–µ–ª—å –æ—Å–Ω–æ–≤–Ω–æ–π –º–∞—Ç—Ä–∏—Ü—ã —Ä–∞–≤–µ–Ω 0, –∞ —ç—Ç–æ –∑–Ω–∞—á–∏—Ç, \
—á—Ç–æ –Ω–µ—Ç –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Ä–µ—à–µ–Ω–∏—è!'
    else:
        for i in range(M_coeff.cols):
            M_temp = M_coeff.copy()
            M_temp[:, i] = M_const 
            #–ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ –º–µ–Ω—è–µ–º —Å—Ç–æ–ª–±—Ü—ã –º–∞—Ç—Ä–∏—Ü—ã –Ω–∞ –∑–Ω–∞—á–µ–Ω–∏—è –∫–æ–Ω—Å—Ç–∞–Ω—Ç
            res.append(M_temp.det()/M_coeff.det())
            #–¥–æ–±–∞–≤–ª—è–µ–º –∫ —Å–ø–∏—Å–∫—É –Ω–∞–π–¥–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π
            #–ø–æ—Å–ª–µ –¥–µ–ª–µ–Ω–∏—è –¥–µ—Ç–µ—Ä–º–∏–Ω–∞–Ω—Ç–∞ –Ω–∞ –¥–µ—Ç–µ—Ä–º–∏–Ω–∞–Ω—Ç –∫–æ–Ω—Å—Ç–∞–Ω—Ç
            
    return res

###–∫–æ–Ω–µ—Ü
    
if __name__ == '__main__':
    loop = asyncio.new_event_loop()
    asyncio.set_event_loop(loop)
    loop.run_until_complete(asyncio.gather(main(), start_polling()))


#END################################
